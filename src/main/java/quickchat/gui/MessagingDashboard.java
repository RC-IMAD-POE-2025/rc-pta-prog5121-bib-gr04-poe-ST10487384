package quickchat.gui;

import quickchat.core.*;
import javax.swing.JOptionPane;

/**
 * A JFrame-based dashboard for the main messaging features of QuickChat.
 * This UI appears after a successful login and provides buttons to access
 * all Part 2 and Part 3 functionalities, such as sending messages, viewing reports,
 * and managing message data.
 *
 * @author Tshedimosetso Wowana
 * @version 1.0.0
 * @since 2025-06-12
 */
public class MessagingDashboard extends javax.swing.JFrame {

    private final String currentLoggedInUser;

    /**
     * Creates new form MessagingDashboard.
     * @param loggedInUser The username of the user who has logged in.
     */
    public MessagingDashboard(String loggedInUser) {
        this.currentLoggedInUser = loggedInUser;
        initComponents();
        // Set the welcome message with the user's name
        welcomeLabel.setText("Welcome, " + this.currentLoggedInUser + "!");
        
        // Load any stored messages from JSON files at startup
        Message.populateWithPart3TestData();
        Message.loadStoredMessagesFromJSON(".", this.currentLoggedInUser);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * The code is generated by NetBeans but can be created manually.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        headerPanel = new javax.swing.JPanel();
        welcomeLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTextArea = new javax.swing.JTextArea();
        actionsPanel = new javax.swing.JPanel();
        createMessageButton = new javax.swing.JButton();
        displayReportButton = new javax.swing.JButton();
        displaySendersButton = new javax.swing.JButton();
        displayLongestButton = new javax.swing.JButton();
        searchIdButton = new javax.swing.JButton();
        searchRecipientButton = new javax.swing.JButton();
        deleteHashButton = new javax.swing.JButton();
        reloadJsonButton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QuickChat Dashboard");
        setMinimumSize(new java.awt.Dimension(800, 600));

        mainPanel.setBackground(new java.awt.Color(236, 229, 221));

        headerPanel.setBackground(new java.awt.Color(7, 94, 84));

        welcomeLabel.setFont(new java.awt.Font("Cascadia Code", 1, 24)); // NOI18N
        welcomeLabel.setForeground(new java.awt.Color(255, 255, 255));
        welcomeLabel.setText("Welcome!");

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(welcomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 736, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerPanelLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(welcomeLabel)
                .addGap(23, 23, 23))
        );

        resultsTextArea.setEditable(false);
        resultsTextArea.setBackground(new java.awt.Color(255, 255, 255));
        resultsTextArea.setColumns(20);
        resultsTextArea.setFont(new java.awt.Font("Cascadia Code", 0, 12)); // NOI18N
        resultsTextArea.setRows(5);
        resultsTextArea.setText("Click an action button to see the results here.");
        jScrollPane1.setViewportView(resultsTextArea);

        actionsPanel.setBackground(new java.awt.Color(236, 229, 221));
        actionsPanel.setLayout(new java.awt.GridLayout(3, 3, 10, 10));

        createMessageButton.setBackground(new java.awt.Color(37, 211, 102));
        createMessageButton.setFont(new java.awt.Font("Cascadia Code", 1, 12)); // NOI18N
        createMessageButton.setForeground(new java.awt.Color(17, 42, 70));
        createMessageButton.setText("Create New Messages");
        createMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createMessageButtonActionPerformed(evt);
            }
        });
        actionsPanel.add(createMessageButton);

        displayReportButton.setBackground(new java.awt.Color(37, 211, 102));
        displayReportButton.setFont(new java.awt.Font("Cascadia Code", 1, 12)); // NOI18N
        displayReportButton.setForeground(new java.awt.Color(17, 42, 70));
        displayReportButton.setText("Display Sent Report");
        displayReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayReportButtonActionPerformed(evt);
            }
        });
        actionsPanel.add(displayReportButton);

        displaySendersButton.setBackground(new java.awt.Color(37, 211, 102));
        displaySendersButton.setFont(new java.awt.Font("Cascadia Code", 1, 12)); // NOI18N
        displaySendersButton.setForeground(new java.awt.Color(17, 42, 70));
        displaySendersButton.setText("Display Senders/Recipients");
        displaySendersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displaySendersButtonActionPerformed(evt);
            }
        });
        actionsPanel.add(displaySendersButton);

        displayLongestButton.setBackground(new java.awt.Color(37, 211, 102));
        displayLongestButton.setFont(new java.awt.Font("Cascadia Code", 1, 12)); // NOI18N
        displayLongestButton.setForeground(new java.awt.Color(17, 42, 70));
        displayLongestButton.setText("Display Longest Message");
        displayLongestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayLongestButtonActionPerformed(evt);
            }
        });
        actionsPanel.add(displayLongestButton);

        searchIdButton.setBackground(new java.awt.Color(37, 211, 102));
        searchIdButton.setFont(new java.awt.Font("Cascadia Code", 1, 12)); // NOI18N
        searchIdButton.setForeground(new java.awt.Color(17, 42, 70));
        searchIdButton.setText("Search by ID");
        searchIdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchIdButtonActionPerformed(evt);
            }
        });
        actionsPanel.add(searchIdButton);

        searchRecipientButton.setBackground(new java.awt.Color(37, 211, 102));
        searchRecipientButton.setFont(new java.awt.Font("Cascadia Code", 1, 12)); // NOI18N
        searchRecipientButton.setForeground(new java.awt.Color(17, 42, 70));
        searchRecipientButton.setText("Search by Recipient");
        searchRecipientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchRecipientButtonActionPerformed(evt);
            }
        });
        actionsPanel.add(searchRecipientButton);

        deleteHashButton.setBackground(new java.awt.Color(37, 211, 102));
        deleteHashButton.setFont(new java.awt.Font("Cascadia Code", 1, 12)); // NOI18N
        deleteHashButton.setForeground(new java.awt.Color(17, 42, 70));
        deleteHashButton.setText("Delete by Hash");
        deleteHashButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteHashButtonActionPerformed(evt);
            }
        });
        actionsPanel.add(deleteHashButton);

        reloadJsonButton.setBackground(new java.awt.Color(37, 211, 102));
        reloadJsonButton.setFont(new java.awt.Font("Cascadia Code", 1, 12)); // NOI18N
        reloadJsonButton.setForeground(new java.awt.Color(17, 42, 70));
        reloadJsonButton.setText("Reload from JSON");
        reloadJsonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadJsonButtonActionPerformed(evt);
            }
        });
        actionsPanel.add(reloadJsonButton);

        logoutButton.setBackground(new java.awt.Color(255, 82, 82));
        logoutButton.setFont(new java.awt.Font("Cascadia Code", 1, 12)); // NOI18N
        logoutButton.setForeground(new java.awt.Color(255, 255, 255));
        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });
        actionsPanel.add(logoutButton);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(actionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(actionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    // --- Action Methods for each button ---
    
    private void displayReportButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        resultsTextArea.setText(Message.displaySentMessagesReport());
    }                                                 

    private void displaySendersButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        resultsTextArea.setText(Message.displaySenderAndRecipientOfSentMessages(this.currentLoggedInUser));
    }                                                  

    private void displayLongestButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        resultsTextArea.setText(Message.displayLongestMessageOverall());
    }                                                  

    private void searchIdButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        String idToSearch = JOptionPane.showInputDialog(this, "Enter Message ID to search:", "Search by ID", JOptionPane.QUESTION_MESSAGE);
        if (idToSearch != null && !idToSearch.trim().isEmpty()) {
            resultsTextArea.setText(Message.searchMessageById(idToSearch.trim()));
        }
    }                                            

    private void searchRecipientButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        String recipientToSearch = JOptionPane.showInputDialog(this, "Enter Recipient's number to search:", "Search by Recipient", JOptionPane.QUESTION_MESSAGE);
        if (recipientToSearch != null && !recipientToSearch.trim().isEmpty()) {
            resultsTextArea.setText(Message.searchMessagesByRecipient(recipientToSearch.trim()));
        }
    }                                                       

    private void deleteHashButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        String hashToDelete = JOptionPane.showInputDialog(this, "Enter Message Hash to delete:", "Delete by Hash", JOptionPane.QUESTION_MESSAGE);
        if (hashToDelete != null && !hashToDelete.trim().isEmpty()) {
            resultsTextArea.setText(Message.deleteMessageByHash(hashToDelete.trim()));
        }
    }                                                

    private void reloadJsonButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        Message.loadStoredMessagesFromJSON(".", this.currentLoggedInUser);
        resultsTextArea.setText("Attempted to reload stored messages from available JSON files.");
    }                                                

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // This button closes the dashboard and opens a new login form
        // so another user can log in.
        new LoginForm(new Login(new Registration()), new QuickChat()).setVisible(true);
        this.dispose();
    }                                            

    private void createMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // This logic is ported from the JOptionPane menu in the original QuickChat.java
        try {
            String numMessagesStr = JOptionPane.showInputDialog(this, "How many messages would you like to process?", "Number of Messages", JOptionPane.QUESTION_MESSAGE);
            if (numMessagesStr == null || numMessagesStr.trim().isEmpty()) return; // User cancelled
            
            int numMessages = Integer.parseInt(numMessagesStr);
            if (numMessages <= 0) {
                JOptionPane.showMessageDialog(this, "Please enter a positive number.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            for (int i = 0; i < numMessages; i++) {
                String recipient = JOptionPane.showInputDialog(this, "Enter recipient's cell number for message " + (i + 1) + ":", "Recipient Input", JOptionPane.PLAIN_MESSAGE);
                if (recipient == null) continue; // Skip if cancelled

                String payload = JOptionPane.showInputDialog(this, "Enter message payload for message " + (i + 1) + ":", "Payload Input", JOptionPane.PLAIN_MESSAGE);
                if (payload == null) continue; // Skip if cancelled

                Message currentMessage = new Message(recipient, payload, this.currentLoggedInUser);

                // Simple validation feedback
                String recipientValidationMsg = currentMessage.validateRecipientNumber(recipient);
                String payloadValidationMsg = currentMessage.validatePayloadLength(payload);

                if (!recipientValidationMsg.equals("Cell phone number successfully captured.")) {
                    JOptionPane.showMessageDialog(this, recipientValidationMsg, "Recipient Error", JOptionPane.ERROR_MESSAGE);
                    continue; // Skip to next message
                }
                if (!payloadValidationMsg.equals("Message ready to send.")) {
                    JOptionPane.showMessageDialog(this, payloadValidationMsg, "Payload Error", JOptionPane.ERROR_MESSAGE);
                    continue; // Skip to next message
                }

                // Give user options: Send, Store, or Disregard
                String[] options = {"Send", "Store for Later", "Disregard"};
                int actionChoice = JOptionPane.showOptionDialog(this, "Action for message to " + recipient + "?", "Choose Action",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);

                switch (actionChoice) {
                    case 0: // Send
                        resultsTextArea.setText(currentMessage.sentMessage());
                        break;
                    case 1: // Store
                        resultsTextArea.setText(currentMessage.storeMessage());
                        break;
                    case 2: // Disregard
                        Message.addMessageToList(currentMessage, "Disregarded");
                        resultsTextArea.setText("Message to " + recipient + " was disregarded.");
                        break;
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid number entered. Please enter a numeric value.", "Input Error", JOptionPane.ERROR_MESSAGE);
        }
    }                                                 


    // Variables declaration - do not modify                     
    private javax.swing.JPanel actionsPanel;
    private javax.swing.JButton createMessageButton;
    private javax.swing.JButton deleteHashButton;
    private javax.swing.JButton displayLongestButton;
    private javax.swing.JButton displayReportButton;
    private javax.swing.JButton displaySendersButton;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logoutButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton reloadJsonButton;
    private javax.swing.JTextArea resultsTextArea;
    private javax.swing.JButton searchIdButton;
    private javax.swing.JButton searchRecipientButton;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration                   
}